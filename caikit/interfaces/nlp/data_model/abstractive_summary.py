# Copyright The Caikit Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Data structures for abstractive summary.
"""

# Standard
from typing import List

# First Party
from py_to_proto.dataclass_to_proto import Annotated, FieldNumber
import alog

# Local
from ....core.data_model import DataObjectBase, dataobject
from ....core.toolkit.errors import error_handler
from ...common.data_model import ProducerId

log = alog.use_channel("DATAM")
error = error_handler.get(log)


@dataobject(package="caikit_data_model.nlp")
class AbstractiveSummary(DataObjectBase):
    """Construct a new answer.
    Args:
        summary:  list(str)
            The list of the summaries (example: 2 summaries generated by the 
            model for the user and agent)
            parts of the conversation
        producer_id:  ProducerId or None
            The block that generated this abstractive summary. 
            None (default) indicates that this value is not set.

    Notes:

    """

    summary: Annotated[List[str], FieldNumber(1)]
    producer_id: Annotated[ProducerId, FieldNumber(2)]

    def __init__(self, summary: List[str], producer_id=None):
        error.type_check("<NLP12866244E>", list, summary=summary)
        error.type_check(
            "<NLP95017405E>",
            ProducerId,
            allow_none=True,
            producer_id=producer_id,
        )

        super().__init__()
        self.producer_id = producer_id
        self.summary = summary
